每一个URL地址都包含三部分:协议、域名(IP)、端口号
  https://www.baidu.com/ (协议是HTTPS、域名是www.baidu.com、端口号是443->HTTPS这个协议默认的端口号就是443,如果端口号是443的话我们不需要在写端口也可以) ->https://www.baidu.com:443/

  http://192.168.0.100:1234/ (协议是HTTP、域名/IP是192.168.0.100，端口号是1234->HTTP的默认端口号是80,和HTTPS一样,如果端口是80就不用写了)

端口号的范围:0~65535


1、服务器
  ->能够在“特定服务器(IP)”的“特定端口”上监听客户端发送的请求，并且根据请求的路径返回相应的结果的都叫做服务器

2、客户端
  ->只要能向“特定服务器(IP)”的“特定端口”发送一个请求，并且可以把服务器响应的内容(返回给我们的内容)进行接收的都叫做客户端

例如：百度网站的文件存放在百度的服务器上,我们每一个人通过浏览器访问URL地址,可以看到百度的网站,那么此时百度就是一个服务器(百度有自己专门的服务器机器),我们每个人都是一个客户端(每个人的浏览器其实是客户端)


3、如果想做一个自己的个人博客,让别人可以访问到,我们需要做的事情
 1)买一台服务器(阿里云服务器),并且给服务器连网->服务器就会有一个自己的外网IP地址
 2)买一个域名,给域名进行解析->DNS解析(把我们的域名和服务器的外网IP关联到一起)
 3)备案

->当我在浏览器中输入一个域名,到看到网站发生了什么?
1)把域名进行DNS解析,通过域名解析出对应的外网的IP地址和端口号
2)通过IP地址找到对应的服务器,在找到服务器上本端口对应的项目(一台服务器可以发布N多个项目,每一个项目都有一个自己对应的端口,但是一般情况下服务器只有一个外网IP地址,不同项目可能访问的是同一台服务器,我们可以通过端口号的不一样来区分不同的项目)
3)服务器端把我们主页面(例如:index.html)里面的代码返回给客户端->HTTP传输(相当于一个快递公司,它的作用就是把服务器的内容返回给客户端)
4)客户端接收到HTML文件的内容后通过浏览器进行渲染

->首先加载和渲染的是HTML代码 ->在加载HTML代码过程中遇到<link>需要向指定的服务器发送一个新的请求,把对应的CSS文件中的内容也都获取到客户端进行渲染 -><script src='xxx'>/<img src='xxx'>/<audio src='xxx'>...这些和CSS一样都需要重新的向服务器发送请求,然后把文件中的内容返回给客户端进行渲染
->服务器可以通过HTTP、HTTPS、FTP...等传输协议把内容返回给客户端




4、NODE
 ->JS是一门全栈编程语言:我们既可以用它编写客户端(JS),也可以使用它编写服务器端(NODE)


5、模块
  ->具有特定功能的某个整体就是一个模块(在NODE中每一个JS文件(或者多个JS文件)都可以称之为一个模块)

  [NODE]
  ->核心模块（原生模块）:NODE天生自带的
    http(创建和管理服务的)、fs(服务器文件读写的)、url(URL地址解析的)...

  ->文件模块:自己在NODE中写的(我们写的每一个JS都是一个模块,现在A模块中调用B模块中的方法,首先在B中通过module.exports把接口暴露出来,在A中通过require('./B')把B模块导入,然后调取对应的方法执行即可)

  ->第三方模块:别人写好的,我想用,都可以称之为第三方模块 ->https://www.npmjs.com/
    npm进行包(第三方模块)的管理
    npm install [包的名字] ->在当前安装目录创建了一个node_modules这样一个文件夹,我们的下载下来的文件都在这里,这个是局部安装,当前的项目才可以使用这个包文件
    以后使用的时候只需要 var 变量=require('包的名字') 就可以使用了


  模块A和模块B之间一般都是不会冲突的
  ->把每一个模块都用一个闭包包起来
  ->想在B模块中使用A模块中的方法,只需要在A模块中把一些给外面用的方法RETURN出去


6、关于内置的模块HTTP、FS、URL模块






